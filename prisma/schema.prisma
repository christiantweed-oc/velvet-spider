// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Client {
  id        String      @id() @default(uuid()) @db.VarChar(36)
  name      String      @db.VarChar(255)
  slug      String      @db.VarChar(255)
  email     String      @db.VarChar(36)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now())
  AppConfig AppConfig[]
  Table     Table[]
  Status    Status[]
  Workflow  Workflow[]

  @@index([name])
}

model AppConfig {
  id              String   @id() @default(uuid()) @db.VarChar(36)
  requestPageSize Int      @db.Int()
  landingPage     String   @db.VarChar(255)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())
  clientId        String   @db.VarChar(255)
  client          Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

model Table {
  id        String   @id() @default(uuid()) @db.VarChar(36)
  name      String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  clientId  String   @db.VarChar(255)
  client    Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  Column    Column[]
}

model Column {
  id        String   @id() @default(uuid()) @db.VarChar(36)
  field     String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  overrides Json?
  tableId   String   @db.VarChar(255)
  table     Table    @relation(fields: [tableId], references: [id], onDelete: Cascade)
}

model Status {
  id             String           @id() @default(uuid()) @db.VarChar(36)
  name           String           @db.VarChar(255)
  key            String           @db.VarChar(255)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now())
  clientId       String           @db.VarChar(255)
  client         Client           @relation(fields: [clientId], references: [id], onDelete: Cascade)
  WorkFlowStatus WorkFlowStatus[]
}

model Workflow {
  id             String           @id() @default(uuid()) @db.VarChar(36)
  name           String           @db.VarChar(255)
  key            String           @db.VarChar(255)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now())
  clientId       String           @db.VarChar(255)
  client         Client           @relation(fields: [clientId], references: [id], onDelete: Cascade)
  WorkFlowStatus WorkFlowStatus[]
}

model WorkFlowStatus {
  statusId   String   @db.VarChar(36)
  workflowId String   @db.VarChar(36)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())

  status   Status   @relation(fields: [statusId], references: [id], onDelete: Cascade)
  workFlow Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@unique([statusId, workflowId])
}
